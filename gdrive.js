
const MIME_GZIP = "application/gzip"
const MIME_JSON = "application/json"

export async function do_gdrive_backup(data) {

	console.log("Requesting oauth token");
    const {token} = await chrome.identity.getAuthToken({ interactive: true });
	if (!token) {
		console.log("OAuth failed");
    	return;
    }

	console.log("Check for file ID.");
	var {gdrive_id} = await chrome.storage.local.get(["gdrive_id"]);

    if(!gdrive_id) {
		console.log("Not Found!");

		const filename = `odinochka-${self.crypto.randomUUID()}.json.gz`;
        const reponse = await uploadBlankFileToDrive(filename, token);
		gdrive_id = reponse.id;
		console.log(`Creted ID: ${gdrive_id}`);
		await chrome.storage.local.set({"gdrive_id":gdrive_id});
    }
    
	const content = await gzip(data);
    

	updateFile(token, gdrive_id, content, MIME_GZIP);


}

async function gzip(data) {
    // h/t https://dev.to/ternentdotdev/json-compression-in-the-browser-with-gzip-and-the-compression-streams-api-4135
	const inblob = new Blob([JSON.stringify(data)])

	const compressedReadableStream = inblob.stream().pipeThrough(
	  new CompressionStream("gzip"),
	);

	const compressedResponse = 
	  await new Response(compressedReadableStream);

	// Get response Blob
	const outblob = await compressedResponse.blob()
    return outblob.arrayBuffer();
}


// Below generated by ChatGPT. Don't sue me bro!




async function uploadBlankFileToDrive(fileName, authToken) {
	console.log("Creating blank file.");
    const metadata = {
        name: fileName,
    };

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: MIME_JSON }));
    form.append('file', new Blob([], { type: MIME_GZIP}));

    const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + authToken
        },
        body: form
    })

	return response.json()

}

// *************************************************************

function updateFile(authToken, fileId, newFileContent, mimeType) {
    const metadata = {
        mimeType: mimeType
    };

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: MIME_JSON }));
    form.append('file', new Blob([newFileContent], { type: mimeType }));

    fetch(`https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=multipart`, {
        method: 'PATCH',
        headers: {
            'Authorization': 'Bearer ' + authToken
        },
        body: form
    })
    .then(response => response.json())
    .then(result => {
        console.log('File updated successfully, new revision created:', result);
    })
    .catch(error => {
        console.error('Error updating file', error);
    });
}

